// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: register_credential.proto

package register_credential

import (
	sevsnp "github.com/google/go-sev-guest/proto/sevsnp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Contains proof that the ak_pub is co-resident with an EK
type CertifiedBlob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Attestation Key (AK) Public Area, encoded as a TPMT_PUBLIC
	AkPub []byte `protobuf:"bytes,1,opt,name=ak_pub,json=akPub,proto3" json:"ak_pub,omitempty"`
	// TPM2 certification, encoded as a TPMS_ATTEST
	CertifyInfo []byte `protobuf:"bytes,2,opt,name=certify_info,json=certifyInfo,proto3" json:"certify_info,omitempty"`
	// TPM2 signature, encoded as a TPMT_Signature
	RawSig        []byte `protobuf:"bytes,3,opt,name=raw_sig,json=rawSig,proto3" json:"raw_sig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertifiedBlob) Reset() {
	*x = CertifiedBlob{}
	mi := &file_register_credential_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertifiedBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifiedBlob) ProtoMessage() {}

func (x *CertifiedBlob) ProtoReflect() protoreflect.Message {
	mi := &file_register_credential_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifiedBlob.ProtoReflect.Descriptor instead.
func (*CertifiedBlob) Descriptor() ([]byte, []int) {
	return file_register_credential_proto_rawDescGZIP(), []int{0}
}

func (x *CertifiedBlob) GetAkPub() []byte {
	if x != nil {
		return x.AkPub
	}
	return nil
}

func (x *CertifiedBlob) GetCertifyInfo() []byte {
	if x != nil {
		return x.CertifyInfo
	}
	return nil
}

func (x *CertifiedBlob) GetRawSig() []byte {
	if x != nil {
		return x.RawSig
	}
	return nil
}

// Contains all information needed to verify the binding from TPM EK to SNP
// Attestation report.
type SevSnpSvsmAttestation struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SevSnpAttestation *sevsnp.Attestation    `protobuf:"bytes,1,opt,name=sev_snp_attestation,json=sevSnpAttestation,proto3" json:"sev_snp_attestation,omitempty"`
	CertifiedBlob     *CertifiedBlob         `protobuf:"bytes,2,opt,name=certified_blob,json=certifiedBlob,proto3" json:"certified_blob,omitempty"`
	// vTPM service manifest retrieved from configfs-tsm via manifest blob
	// its format is defined by the SVSM spec
	VtpmServiceManifest []byte `protobuf:"bytes,3,opt,name=vtpm_service_manifest,json=vtpmServiceManifest,proto3" json:"vtpm_service_manifest,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SevSnpSvsmAttestation) Reset() {
	*x = SevSnpSvsmAttestation{}
	mi := &file_register_credential_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SevSnpSvsmAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SevSnpSvsmAttestation) ProtoMessage() {}

func (x *SevSnpSvsmAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_register_credential_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SevSnpSvsmAttestation.ProtoReflect.Descriptor instead.
func (*SevSnpSvsmAttestation) Descriptor() ([]byte, []int) {
	return file_register_credential_proto_rawDescGZIP(), []int{1}
}

func (x *SevSnpSvsmAttestation) GetSevSnpAttestation() *sevsnp.Attestation {
	if x != nil {
		return x.SevSnpAttestation
	}
	return nil
}

func (x *SevSnpSvsmAttestation) GetCertifiedBlob() *CertifiedBlob {
	if x != nil {
		return x.CertifiedBlob
	}
	return nil
}

func (x *SevSnpSvsmAttestation) GetVtpmServiceManifest() []byte {
	if x != nil {
		return x.VtpmServiceManifest
	}
	return nil
}

var File_register_credential_proto protoreflect.FileDescriptor

const file_register_credential_proto_rawDesc = "" +
	"\n" +
	"\x19register_credential.proto\x12\x13register_credential\x1a\x12proto/sevsnp.proto\"b\n" +
	"\rCertifiedBlob\x12\x15\n" +
	"\x06ak_pub\x18\x01 \x01(\fR\x05akPub\x12!\n" +
	"\fcertify_info\x18\x02 \x01(\fR\vcertifyInfo\x12\x17\n" +
	"\araw_sig\x18\x03 \x01(\fR\x06rawSig\"\xdb\x01\n" +
	"\x15SevSnpSvsmAttestation\x12C\n" +
	"\x13sev_snp_attestation\x18\x01 \x01(\v2\x13.sevsnp.AttestationR\x11sevSnpAttestation\x12I\n" +
	"\x0ecertified_blob\x18\x02 \x01(\v2\".register_credential.CertifiedBlobR\rcertifiedBlob\x122\n" +
	"\x15vtpm_service_manifest\x18\x03 \x01(\fR\x13vtpmServiceManifestB:Z8github.com/google/go-tpm-tools/proto/register_credentialb\x06proto3"

var (
	file_register_credential_proto_rawDescOnce sync.Once
	file_register_credential_proto_rawDescData []byte
)

func file_register_credential_proto_rawDescGZIP() []byte {
	file_register_credential_proto_rawDescOnce.Do(func() {
		file_register_credential_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_register_credential_proto_rawDesc), len(file_register_credential_proto_rawDesc)))
	})
	return file_register_credential_proto_rawDescData
}

var file_register_credential_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_register_credential_proto_goTypes = []any{
	(*CertifiedBlob)(nil),         // 0: register_credential.CertifiedBlob
	(*SevSnpSvsmAttestation)(nil), // 1: register_credential.SevSnpSvsmAttestation
	(*sevsnp.Attestation)(nil),    // 2: sevsnp.Attestation
}
var file_register_credential_proto_depIdxs = []int32{
	2, // 0: register_credential.SevSnpSvsmAttestation.sev_snp_attestation:type_name -> sevsnp.Attestation
	0, // 1: register_credential.SevSnpSvsmAttestation.certified_blob:type_name -> register_credential.CertifiedBlob
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_register_credential_proto_init() }
func file_register_credential_proto_init() {
	if File_register_credential_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_register_credential_proto_rawDesc), len(file_register_credential_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_register_credential_proto_goTypes,
		DependencyIndexes: file_register_credential_proto_depIdxs,
		MessageInfos:      file_register_credential_proto_msgTypes,
	}.Build()
	File_register_credential_proto = out.File
	file_register_credential_proto_goTypes = nil
	file_register_credential_proto_depIdxs = nil
}
